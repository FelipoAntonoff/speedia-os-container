package page

import (
	"github.com/goinfinite/os/src/domain/entity"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	presenterDto "github.com/goinfinite/os/src/presentation/ui/presenter/dto"
	presenterValueObject "github.com/goinfinite/os/src/presentation/ui/presenter/valueObject"
)

script MarketplaceIndexLocalState() {
    document.addEventListener('alpine:init', () => {
		Alpine.data('marketplace', () => ({
			// Primary States
			installedMarketplaceItem: {},
			resetPrimaryStates() {
				this.installedMarketplaceItem = {
					id: '',
					name: '',
				};
			},

			// Auxiliary States
			selectedMarketplaceCatalogVerticalTab: 'apps',
			updateSelectedMarketplaceCatalogVerticalTab(tabName) {
				this.selectedMarketplaceCatalogVerticalTab = tabName;
			},
			reloadMarketplacePageContent(listType) {
				htmx.ajax(
					'GET',
					'/marketplace/?listType=' + listType,
					{
						select: '#marketplace-page-content',
						target: '#marketplace-page-content',
						indicator: '#loading-overlay',
						swap: 'outerHTML transition:true'
					},
				);
			},

			// Modal States
			isUninstallMarketplaceItemModalOpen: false,
			openUninstallMarketplaceItemModal(installedItemId, installedItemName) {
				this.resetPrimaryStates();

				this.installedMarketplaceItem.id = installedItemId;
				this.installedMarketplaceItem.name = installedItemName;
				this.isUninstallMarketplaceItemModalOpen = true;
			},
			closeUninstallMarketplaceItemModal() {
				this.isUninstallMarketplaceItemModalOpen = false;
			},
			uninstallMarketplaceItem() {
				htmx.ajax(
					'DELETE',
					'/api/v1/marketplace/installed/' + this.installedMarketplaceItem.id + '/',
					{swap: 'none'},
				);
				this.closeUninstallMarketplaceItemModal();
			},
		}));
	});
}

templ MarketplaceIndex(marketplaceOverview presenterDto.MarketplaceOverview) {
	@MarketplaceIndexLocalState()
	<div class="flex flex-col" x-data="marketplace">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Marketplace",
				"Install and easily manage apps, frameworks, and stacks. With just a few clicks, you can set up ready-to-use solutions like websites and online stores. Flexible configuration of your environment quickly and conveniently, meeting your development and deployment needs.",
				"ph-storefront",
			)
		</div>
		<div id="marketplace-page-content">
			@MarketplaceTabs(marketplaceOverview)
			@componentStructural.DeleteModal(
				"isUninstallMarketplaceItemModalOpen",
				"closeUninstallMarketplaceItemModal()",
				"uninstallMarketplaceItem()",
				"installedMarketplaceItem.name", "installedMarketplaceItem.id",
			)
		</div>
	</div>
}

func readMarketplaceTabHeaderItems(
	listType presenterValueObject.MarketplaceListType,
) []componentStructural.HorizontalTabHeaderItem {
	tabHeaderItems := []componentStructural.HorizontalTabHeaderItem{
		{Label: "Installed", ComponentValue: "installed"},
		{Label: "Catalog", ComponentValue: "catalog"},
	}

	for itemIndex := range tabHeaderItems {
		if listType.String() != tabHeaderItems[itemIndex].ComponentValue {
			tabHeaderItems[itemIndex].AdditionalClasses = "bg-os-700 hover:bg-os-300 text-slate-500"
			continue
		}

		tabHeaderItems[itemIndex].AdditionalClasses = "bg-os-500 text-neutral-50"
	}

	return tabHeaderItems
}

templ MarketplaceInstalledItemsTable(
	installedItemsList []entity.MarketplaceInstalledItem,
) {
	<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
		<thead class="text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="w-1/6 px-5 py-3 text-left">Name</th>
				<th scope="col" class="w-1/6 px-5 py-3">Type</th>
				<th scope="col" class="w-1/6 px-5 py-3">Installation Path</th>
				<th scope="col" class="w-1/6 px-5 py-3">Installation Directory</th>
				<th scope="col" class="w-1/6 px-5 py-3">Created At</th>
				<th scope="col" class="w-1/6 px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, installedItem := range installedItemsList {
				<tr class="odd:bg-os-300 even:bg-os-500 border-b border-neutral-500 border-opacity-30 text-center">
					<th scope="row" class="w-1/6 px-5 py-3 text-left font-normal">
						<div class="inline-flex items-center">
							<img class="mr-2 h-10 w-10 rounded-full" src={ installedItem.AvatarUrl.String() }/>
							{ installedItem.Name.String() }
						</div>
					</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">{ installedItem.Type.String() }</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">
						{ installedItem.Hostname.String() + installedItem.UrlPath.String() }
					</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">{ installedItem.InstallDirectory.String() }</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">{ installedItem.CreatedAt.GetDateOnly() }</th>
					<th scope="row" class="w-1/6 px-5 py-3 text-right font-normal">
						<div class="inline-flex">
							@componentStructural.CircularIconButtonWithTooltip(
								"ph-trash", "red-800", "red-600",
								"openUninstallMarketplaceItemModal("+installedItem.Id.String()+", '"+installedItem.Name.String()+"')",
								"Uninstall", "red-500",
							)
						</div>
					</th>
				</tr>
			}
		</tbody>
	</table>
}

templ MarketplaceCatalogItemsTab(
	catalogItemsList []entity.MarketplaceCatalogItem,
) {
	<div class="flex justify-stretch">
		@componentStructural.VerticalTabHeader(
			[]componentStructural.VerticalTabHeaderItem{
				{Label: "Apps", ComponentValue: "apps"},
				{Label: "Stack", ComponentValue: "stack"},
				{Label: "Framework", ComponentValue: "framework"},
			}, "updateSelectedMarketplaceCatalogVerticalTab",
		)
		<div class="ml-4 grid grid-cols-2 gap-x-24 gap-y-8">
			for _, catalogItem := range catalogItemsList {
				<div class="bg-os-800 border-os-400 space-y-2 rounded-md border border-4 p-4">
					<div class="inline-flex items-center">
						<img class="mr-3 h-10 w-10" src={ catalogItem.AvatarUrl.String() }/>
						<h1>{ catalogItem.Name.String() }</h1>
					</div>
					@componentStructural.CollapsibleText(
						catalogItem.Slugs[0].String(), catalogItem.Description.String(),
						"sm", 180,
					)
					<div class="bg-os-500 p-10">Carrossel here!</div>
					@componentForm.SubmitButton(
						"install-"+catalogItem.Slugs[0].String()+"-marketplace-item",
						"Install", "ph-arrow-line-down", "console.log('"+catalogItem.Name.String()+"')", false,
					)
				</div>
			}
		</div>
	</div>
}

templ MarketplaceTabs(marketplaceOverview presenterDto.MarketplaceOverview) {
	@componentStructural.HorizontalTabHeader(
		readMarketplaceTabHeaderItems(marketplaceOverview.ListType),
		"reloadMarketplacePageContent",
	)
	<div class="bg-os-800 -mt-4 rounded-b-xl rounded-r-xl p-4">
		<div class="bg-os-500 rounded-b-lg rounded-r-lg p-6">
			if marketplaceOverview.ListType.String() == "installed" {
				@MarketplaceInstalledItemsTable(marketplaceOverview.InstalledItemsList)
			} else {
				@MarketplaceCatalogItemsTab(marketplaceOverview.CatalogItemsList)
			}
		</div>
	</div>
}

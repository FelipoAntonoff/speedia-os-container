package page

import (
	"github.com/speedianet/os/src/domain/entity"
	"github.com/speedianet/os/src/domain/valueObject"
	infraHelper "github.com/speedianet/os/src/infra/helper"
	componentForm "github.com/speedianet/os/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
	presenterDto "github.com/speedianet/os/src/presentation/ui/presenter/dto"
	"strconv"
)

script DatabasesIndexLocalState(selectedDatabaseType string) {
    document.addEventListener('alpine:init', () => {
		Alpine.data('databases', () => ({
			// Primary states
			database: {},
			databaseUser: {},
			setDatabaseUserPassword(password) {
				this.databaseUser.password = password;
			},
			resetPrimaryStates() {
				this.database = {
					'name': '',
					'type': selectedDatabaseType,
					'size': ''
				}
				this.databaseUser = {
					'dbName': '',
					'username': '',
					'password': '',
					'privileges': []
				}
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary states
			changeSelectedDatabaseType(databaseType) {
				htmx.ajax(
					'GET',
					'/databases/?dbType=' + databaseType,
					{
						select: '#databases-content',
						target: '#databases-content',
						swap: 'outerHTML transition:true'
					},
				);
			},
			installDatabaseService(databaseType) {
				htmx.ajax(
					'POST',
					'/api/v1/services/installables/',
					{
						swap: 'none',
						values: { name: databaseType },
					},
				);
			},
			get shouldDisableCreateDatabaseSubmitButton() {
				return this.database.name == ''
			},
			isDatabaseUserPasswordHumanReadable: false,
			toggleDatabaseUserPasswordReadability() {
				this.isDatabaseUserPasswordHumanReadable = !this.isDatabaseUserPasswordHumanReadable;
			},
			get shouldDisableCreateDatabaseUserSubmitButton() {
				console.log('shouldDisableCreateDatabaseUserSubmitButton: ' + this.database.name == '' || this.databaseUser.username == '' || this.databaseUser.password == '')
				return this.database.name == '' || this.databaseUser.username == '' || this.databaseUser.password == ''
			},

			// Modal states
			isCreateDatabaseModalOpen: false,
            openCreateDatabaseModal() {
				this.resetPrimaryStates();

				this.isCreateDatabaseModalOpen = true;
			},
            closeCreateDatabaseModal() {
                this.isCreateDatabaseModalOpen = false;
            },
            isDeleteDatabaseModalOpen: false,
            openDeleteDatabaseModal(databaseName) {
				this.resetPrimaryStates();

				this.database.name = databaseName;
				this.isDeleteDatabaseModalOpen = true;
			},
			closeDeleteDatabaseModal() {
				this.isDeleteDatabaseModalOpen = false;
			},
			deleteDatabaseElement() {
				htmx.ajax(
					'DELETE',
					'/api/v1/database/' + this.database.type + '/' + this.database.name + '/',
					{swap: 'none'},
				);
				this.closeDeleteDatabaseModal();
			},
			isCreateDatabaseUserModalOpen: false,
            openCreateDatabaseUserModal() {
				this.resetPrimaryStates();

				this.isCreateDatabaseUserModalOpen = true;
			},
            closeCreateDatabaseUserModal() {
                this.isCreateDatabaseUserModalOpen = false;
            },
			createDatabaseUser() {
				htmx.ajax(
					'POST',
					'/api/v1/database/' + this.database.type + '/' + this.database.name + '/user/',
					{
						swap: 'none',
						indicator: '#loading-overlay',
						values: {
							username: this.databaseUser.username,
							password: this.databaseUser.password,
							privileges: this.databaseUser.privileges,
						}
					},
				);
				this.closeCreateDatabaseUserModal();
			}
		}))
	})
}

templ DatabasesIndex(selectedDbTypeSummary presenterDto.SelectedDatabaseTypeSummary) {
	@DatabasesIndexLocalState(selectedDbTypeSummary.Type.String())
	<div class="flex flex-col" x-data="databases">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Databases",
				"",
				"ph-database",
			)
		</div>
		<div
			id="databases-content"
			hx-get={ "/databases/?dbType=" + selectedDbTypeSummary.Type.String() }
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms, click from:button#create-database-user delay:500ms"
			hx-select="#databases-content"
			hx-target="#databases-content"
			hx-swap="outerHTML transition:true"
			class="card w-full"
		>
			<div id="databases-tabs">
				@DatabasesTabs(selectedDbTypeSummary)
			</div>
			@CreateDatabaseModal(selectedDbTypeSummary.Type)
			@componentStructural.DeleteModal(
				"isDeleteDatabaseModalOpen", "closeDeleteDatabaseModal()", "deleteDatabaseElement()",
				"database.name", "database.name",
			)
			@CreateDatabaseUserModal(selectedDbTypeSummary.Databases)
		</div>
	</div>
}

func getDatabasesTabHeaderItems(
	selectedDatabaseType valueObject.DatabaseType,
) []componentStructural.TabHeaderItem {
	tabHeaderItems := []componentStructural.TabHeaderItem{
		{Label: "MySQL/MariaDB/Percona", ComponentValue: "mariadb"},
		{Label: "PostgreSQL", ComponentValue: "postgresql"},
	}

	for itemIndex := range tabHeaderItems {
		if selectedDatabaseType.String() != tabHeaderItems[itemIndex].ComponentValue {
			tabHeaderItems[itemIndex].AdditionalClasses = " text-slate-500"
			continue
		}

		tabHeaderItems[itemIndex].AdditionalClasses = " text-speedia-500 border-b border-speedia-500"
	}

	return tabHeaderItems
}

templ DatabasesTabs(selectedDbTypeSummary presenterDto.SelectedDatabaseTypeSummary) {
	@componentStructural.TabHeader(
		getDatabasesTabHeaderItems(selectedDbTypeSummary.Type), "changeSelectedDatabaseType",
	)
	<!-- DatabaseTabContent -->
	<div class="bg-os-800 p-4 rounded-b-xl rounded-r-xl">
		<div class="px-4 bg-os-500 rounded-lg space-y-3">
			if selectedDbTypeSummary.IsInstalled {
				<div class="p-4 bg-os-500 rounded-r-lg">
					<i class="ph-duotone ph-warning align-middle text-xl text-yellow mr-3"></i>
					<span class="mr-3">The<p class="inline-flex mx-1 text-speedia-300 font-bold">{ selectedDbTypeSummary.Type.String() }</p>service is not installed yet.</span>
					@componentForm.SubmitButton("Schedule "+selectedDbTypeSummary.Type.String()+" service installation", "ph-caret-line-down", "installDatabaseService('"+selectedDbTypeSummary.Type.String()+"')", true)
				</div>
			} else {
				<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
					<thead class="text-xs uppercase text-neutral-400">
						<tr class="border-b border-neutral-500 border-opacity-90 text-center">
							<th scope="col" class="px-5 py-3 w-1/7 text-left">Database Name</th>
							<th scope="col" class="px-5 py-3 w-2/7 text-center">Users</th>
							<th scope="col" class="px-5 py-3 w-1/7 text-left">Size</th>
							<th scope="col" class="px-5 py-3 space-x-2 flex justify-end">
								@componentForm.SubmitButton("Create user", "ph-user-plus", "openCreateDatabaseUserModal()", true)
								@componentForm.SubmitButton("Create database", "ph-database", "openCreateDatabaseModal()", true)
							</th>
						</tr>
					</thead>
					<tbody>
						for _, database := range selectedDbTypeSummary.Databases {
							<tr class="bg-os-800 text-white">
								<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ database.Name.String() }</th>
								<th scope="row" class="px-5 py-3 w-1/4 text-left">
									<div class="bg-os-500 rounded-md px-2.5 py-1 max-h-75">
										for _, user := range database.Users {
											<div class="flex justify-between items-center p-3 my-1.5 bg-os-800 rounded-md">
												<span class="font-normal">{ user.Username.String() }</span>
												<div class="flex space-x-2">
													@componentStructural.CircularIconButtonWithTooltip("ph-pencil", "speedia-500", "speedia-300", "", "Edit user", "os-200")
													@componentStructural.CircularIconButtonWithTooltip("ph-trash", "red-800", "red-600", "", "Delete user", "red-500")
												</div>
											</div>
										}
									</div>
								</th>
								<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ strconv.FormatInt(database.Size.Int64(), 10) }</th>
								<th scope="row" class="px-5 py-3 w-1/4 text-right">
									<div class="inline-flex">
										@componentStructural.CircularIconButtonWithTooltip(
											"ph-trash", "red-800", "red-600", "openDeleteDatabaseModal('"+database.Name.String()+"')", "Delete database", "red-500",
										)
									</div>
								</th>
							</tr>
						}
					</tbody>
				</table>
				<div class="bg-os-500 p-0.5"></div>
			}
		</div>
	</div>
}

templ CreateDatabaseForm(selectedDatabaseType valueObject.DatabaseType) {
	<form
		hx-post={ "/api/v1/database/" + selectedDatabaseType.String() }
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="my-6">
			@componentForm.InputField("text", "dbName", "Database Name", "database.name", false)
		</div>
		@componentForm.DeactivatableSubmitButton(
			"", "Create", "ph-check-fat", "closeCreateDatabaseModal()", "shouldDisableCreateDatabaseSubmitButton", false,
		)
	</form>
}

templ CreateDatabaseModal(selectedDatabaseType valueObject.DatabaseType) {
	@componentStructural.Modal(
		"Create Database", "isCreateDatabaseModalOpen", "closeCreateDatabaseModal()",
		"database.type",
	) {
		@CreateDatabaseForm(selectedDatabaseType)
	}
}

func getOnlyDatabasesNames(selectedDatabaseTypeDatabases []entity.Database) []string {
	databasesNames := []string{}
	for _, database := range selectedDatabaseTypeDatabases {
		databasesNames = append(databasesNames, database.Name.String())
	}

	return databasesNames
}

templ CreateDatabaseUserForm(selectedDatabaseTypeDatabases []entity.Database) {
	<div class="my-6 space-y-6">
		@componentForm.SelectInput(
			"dbName", "Database Name", "database.name", getOnlyDatabasesNames(selectedDatabaseTypeDatabases), false,
		)
		@componentForm.InputField("text", "username", "Username", "databaseUser.username", false)
		<div class="space-y-2">
			@componentForm.PasswordInput(
				"password", "Password", "databaseUser.password", "isDatabaseUserPasswordHumanReadable", "toggleDatabaseUserPasswordReadability()", false,
			)
			<div class="flex justify-end">
				@componentStructural.LabeledButton(
					"generate random password", "ph-arrows-clockwise", "os-800", "os-200", "setDatabaseUserPassword('"+infraHelper.GenPass(16)+"')", true,
				)
			</div>
		</div>
	</div>
	@componentForm.DeactivatableSubmitButton(
		"create-database-user", "Create", "ph-check-fat", "createDatabaseUser()", "shouldDisableCreateDatabaseUserSubmitButton", false,
	)
}

templ CreateDatabaseUserModal(selectedDatabaseTypeDatabases []entity.Database) {
	@componentStructural.Modal(
		"Create Database User", "isCreateDatabaseUserModalOpen", "closeCreateDatabaseUserModal()",
		"database.type",
	) {
		@CreateDatabaseUserForm(selectedDatabaseTypeDatabases)
	}
}

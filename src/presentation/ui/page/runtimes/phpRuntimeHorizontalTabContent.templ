package pageRuntimes

import (
	"github.com/speedianet/os/src/domain/entity"
	"github.com/speedianet/os/src/domain/valueObject"
	componentForm "github.com/speedianet/os/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
	presenterDto "github.com/speedianet/os/src/presentation/ui/presenter/dto"
	"strconv"
)

script PhpRuntimeHorizontalTabContentLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('php', () => ({
			// Primary States
			phpConfigs: {},
			resetPrimaryStates() {
				phpConfigsElement = document.getElementById('phpConfigs');
				if (!phpConfigsElement) {
					return;
				}
				this.phpConfigs = JSON.parse(phpConfigsElement.textContent);
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary States
			selectedPhpVerticalTab: 'modules',
			updateSelectedPhpVerticalTab(tabName) {
				this.selectedPhpVerticalTab = tabName;
			},

			// Modal States
			isUpdatePhpVersionModalOpen: false,
			openUpdatePhpVersionModal() {
				this.isUpdatePhpVersionModalOpen = true;
			},
			closeUpdatePhpVersionModal() {
				this.isUpdatePhpVersionModalOpen = false;
			},
			updatePhpVersion() {
				htmx.ajax(
					'PUT', '/api/v1/runtime/php/' + this.phpConfigs.hostname + '/',
					{
						swap: 'none',
						values: { version: this.phpConfigs.version },
					},
				);
				this.closeUpdatePhpVersionModal();
			},
		}));
	});
}

templ PhpRuntimeHorizontalTabContent(
	runtimeOverview presenterDto.RuntimeOverview,
	vhostsHostnames []string,
) {
	<!-- PhpRuntimeHorizontalTabContent JavaScript -->
	@PhpRuntimeHorizontalTabContentLocalState()
	<!-- PhpRuntimeHorizontalTabContent HTML -->
	<div class="bg-os-800 -mt-4 rounded-b-xl rounded-r-xl p-4" x-data="php">
		<div class="bg-os-500 rounded-b-lg rounded-r-lg px-4 py-2">
			if runtimeOverview.IsInstalled {
				if runtimeOverview.IsVirtualHostUsingRuntime {
					@FunctionalPhpRuntimeContent(runtimeOverview, vhostsHostnames)
				} else {
					@CreatePhpMappingForm(runtimeOverview.VirtualHostHostname)
				}
			} else {
				@componentStructural.ServiceNotInstalledWarningForm("php")
			}
		</div>
		@UpdatePhpVersionModal()
	</div>
}

templ PhpModulesCheckboxInputsSwitchToggles(phpConfigs *entity.PhpConfigs) {
	<!-- PhpModulesCheckboxInputsSwitchToggles -->
	<div
		x-show="selectedPhpVerticalTab == 'modules'"
		class="gap-7.5 grid grid-cols-5 lg:grid-cols-6"
	>
		// Using the index as the key is not recommended, but in this case, the entities
		// list used here is the exact same as the one that will be on Alpine.js, so
		// the position of the entities will also be the same. Since we need Alpine to
		// control the state of the checkboxes, we have to use the index as the key.
		for moduleIndex, moduleEntity := range phpConfigs.Modules {
			@componentForm.CheckboxInputSwitchToggle(
				"", moduleEntity.Name.String(),
				"phpConfigs.modules["+strconv.FormatInt(int64(moduleIndex), 10)+"].status",
				"",
			)
		}
	</div>
}

func transformPhpSettingsOptionsIntoStringSlice(
	options []valueObject.PhpSettingOption,
) []string {
	optionsStrSlice := []string{}
	for _, phpOption := range options {
		optionsStrSlice = append(optionsStrSlice, phpOption.String())
	}

	return optionsStrSlice
}

templ PhpSettingsInputs(phpConfigs *entity.PhpConfigs) {
	<!-- PhpSettingsInputs -->
	<div
		x-show="selectedPhpVerticalTab == 'settings'"
		class="grid grid-cols-3 gap-7"
	>
		for settingIndex, settingEntity := range phpConfigs.Settings {
			if settingEntity.Type.String() == "text" {
				@componentForm.InputField(
					settingEntity.Value.GetType(), "", settingEntity.Name.String(),
					"phpConfigs.settings["+strconv.FormatInt(int64(settingIndex), 10)+"].value",
					false,
				)
			} else {
				@componentForm.SelectInput(
					"", settingEntity.Name.String(),
					"phpConfigs.settings["+strconv.FormatInt(int64(settingIndex), 10)+"].value",
					"", transformPhpSettingsOptionsIntoStringSlice(settingEntity.Options), false,
				)
			}
		}
	</div>
}

func transformPhpVersionOptionsIntoStringSlice(
	versionOptions []valueObject.PhpVersion,
) []string {
	versionOptionsStrSlice := []string{}
	for _, versionOption := range versionOptions {
		versionOptionsStrSlice = append(versionOptionsStrSlice, versionOption.String())
	}

	return versionOptionsStrSlice
}

templ FunctionalPhpRuntimeContent(
	runtimeOverview presenterDto.RuntimeOverview,
	vhostsHostnames []string,
) {
	<!-- FunctionalPhpRuntimeContent JavaScript -->
	@templ.JSONScript("phpConfigs", runtimeOverview.PhpConfigs)
	<!-- FunctionalPhpRuntimeContent HTML -->
	<div class="p-4">
		<div class="lg:max-w-1/2 flex flex-row space-x-5">
			@componentForm.SelectInput(
				"virtualHost", "Virtual Host Hostname",
				"phpConfigs.hostname",
				"const vhostHostname = $event.target.value; updateSelectedVhostHostname(vhostHostname)",
				vhostsHostnames, false,
			)
			@componentForm.SelectInput(
				"version", "Version", "phpConfigs.version.value",
				"openUpdatePhpVersionModal()",
				transformPhpVersionOptionsIntoStringSlice(runtimeOverview.PhpConfigs.Version.Options),
				false,
			)
		</div>
		<form
			id="update-php-runtime-configs-form"
			hx-put={ "/api/v1/runtime/php/" + runtimeOverview.VirtualHostHostname.String() + "/" }
			hx-ext="encoding-request-as-json"
			hx-swap="none"
		>
			<div class="mt-6 flex">
				@componentStructural.VerticalTabHeader(
					[]componentStructural.VerticalTabHeaderItem{
						{Label: "Modules", Icon: "ph-puzzle-piece", ComponentValue: "modules"},
						{Label: "Settings", Icon: "ph-gear", ComponentValue: "settings"},
					}, "updateSelectedPhpVerticalTab",
				)
				<div id="php-vertical-tab-content" class="px-10 py-4">
					@PhpModulesCheckboxInputsSwitchToggles(runtimeOverview.PhpConfigs)
					@PhpSettingsInputs(runtimeOverview.PhpConfigs)
				</div>
			</div>
			<div class="mt-5 flex justify-end">
				<div class="w-1/4">
					@componentForm.SubmitButton(
						"apply-php-runtime-configs-changes", "Apply changes",
						"ph-check-fat", "", false,
					)
				</div>
			</div>
		</form>
	</div>
}

templ CreatePhpMappingForm(selectedVhostHostname valueObject.Fqdn) {
	<!-- CreatePhpMappingForm -->
	<form
		id="create-php-mapping-form"
		hx-post="/api/v1/vhosts/mapping/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<h1 class="flex text-3xl">The Selected Virtual Host Doesn't Map to PHP Yet</h1>
		<p class="mt-2 text-justify">
			In order to control PHP settings and modules, the selected virtual host needs to proxy traffic to the PHP Web Server.
			<br/>
			Just click on "Create Mapping" and the system will do this for you. If you want to map a specific sub-directory of your virtual host to the PHP Web Server, go to the Advanced Settings and change the Sub-directory from "/" (root) to the desired location.
		</p>
		<section class="w-full rounded-md">
			<details class="bg-os-800 group mt-5 rounded-md p-4">
				<summary class="relative flex cursor-pointer list-none items-center pr-8 text-neutral-50 text-opacity-80 focus-visible:outline-none group-open:text-opacity-100 group-hover:text-opacity-100 [&::-webkit-details-marker]:hidden">
					<i class="ph-duotone ph-gear mr-2 text-2xl"></i>
					<span class="font-bold">Advanced Settings</span>
					<i class="ph-bold ph-plus absolute right-0 top-1.5 text-xs transition duration-300 group-open:rotate-45"></i>
				</summary>
				<div class="mt-3 flex items-center space-x-10 py-2">
					<div class="w-1/3">
						@componentForm.InputField("text", "path", "Subdirectory", "", false)
					</div>
					<p>Subdirectories are used to access different applications within the same domain. For example, if you have a website at <strong>{ selectedVhostHostname.String() }</strong> and want to create a blog, you can create a subdirectory called blog and access it at <strong>{ selectedVhostHostname.String() }</strong>/blog.</p>
				</div>
			</details>
		</section>
		<div class="mt-5 flex w-full justify-end">
			<input type="hidden" name="hostname" value={ selectedVhostHostname.String() }/>
			<input type="hidden" name="targetType" value="service"/>
			<input type="hidden" name="targetValue" value="php"/>
			<div class="w-1/5">
				@componentForm.SubmitButton(
					"create-php-mapping-button", "create mapping", "ph-plus-square",
					"", false,
				)
			</div>
		</div>
	</form>
}

templ UpdatePhpVersionWarningContent() {
	<h3 class="text-pretty mb-3 text-xl font-bold leading-relaxed">
		Do you really want to change the PHP version?
	</h3>
	<strong>Before changing, make sure your application is compatible with PHP version <span x-text="phpConfigs.version"></span>.</strong>
	<p>Remember to then enable/disable the desired modules and adjust the settings in the new version, since the modules/settings of the previous version may be different.</p>
}

templ UpdatePhpVersionModal() {
	<!-- UpdatePhpVersionModal -->
	@componentStructural.WarningModal(
		"isUpdatePhpVersionModalOpen", "closeUpdatePhpVersionModal()",
		"Cancel", "updatePhpVersion()",
		"update-version-button", "ph-swap", "Yes, change version",
	) {
		@UpdatePhpVersionWarningContent()
	}
}

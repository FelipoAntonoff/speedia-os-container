package page

import (
	"github.com/speedianet/os/src/domain/entity"
	componentForm "github.com/speedianet/os/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
)

script SslsIndexLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('ssls', () => ({
			// Primary states
			sslPair: {},
			resetPrimaryStates() {
				this.sslPair = {
					id: '',
					virtualHostsHostnames: [],
					certificate: '',
					key: '',
				}
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary states
			get shouldDisableAddOrReplaceSslCertificateSubmitButton() {
				return this.sslPair.virtualHostsHostnames.length == 0 || this.sslPair.certificate == '' || this.sslPair.key == ''
			},
			get shouldDisableRemoveVirtualHostsHostnamesSubmitButton() {
				return this.sslPair.id == '' || this.sslPair.virtualHostsHostnames.length == 0
			},
			downloadPemFile(sslPairId, fileContent, fileExtension) {
				const blobFile = new Blob([atob(fileContent)], { type: 'text/plain' });
				const blobFileUrlObject = window.URL.createObjectURL(blobFile);
				const downloadPemFileElement = document.createElement('a');

				downloadPemFileElement.href = blobFileUrlObject;
				downloadPemFileElement.download = `${sslPairId}.${fileExtension}`;
				document.body.appendChild(downloadPemFileElement);

				downloadPemFileElement.click();
				window.URL.revokeObjectURL(blobFileUrlObject);
				document.body.removeChild(downloadPemFileElement);
			},

			// Modal states
			isRemoveVirtualHostsHostnamesModalOpen: false,
			openRemoveVirtualHostsHostnamesModal(sslPairId) {
				this.resetPrimaryStates();

				this.sslPair.id = sslPairId;
				this.isRemoveVirtualHostsHostnamesModalOpen = true;
			},
			closeRemoveVirtualHostsHostnamesModal() {
				this.isRemoveVirtualHostsHostnamesModalOpen = false;
			},
			isSwapToSelfSignedModalOpen: false,
			openSwapToSelfSignedModal(sslPairId) {
				this.resetPrimaryStates();

				this.sslPair.id = sslPairId;
				this.isSwapToSelfSignedModalOpen = true;
			},
			closeSwapToSelfSignedModal() {
				this.isSwapToSelfSignedModalOpen = false;
			},
			swapToSelfSigned() {
				htmx.ajax(
					'DELETE',
					'/api/v1/ssl/' + this.sslPair.id + '/',
					{swap:'none'},
				);
				this.closeSwapToSelfSignedModal();
			},
			isAddOrReplaceSslCertificateModalOpen: false,
			openAddOrReplaceSslCertificateModal() {
				this.resetPrimaryStates();

				this.isAddOrReplaceSslCertificateModalOpen = true;
			},
			closeAddOrReplaceSslCertificateModal() {
				this.sslPair.certificate = btoa(this.sslPair.certificate);
				this.sslPair.key = btoa(this.sslPair.key);

				this.isAddOrReplaceSslCertificateModalOpen = false;
			},
		}))
	})
}

templ SslsIndex(sslPairs []entity.SslPair, vhostsHostnames []string) {
	@SslsIndexLocalState()
	<div x-data="ssls">
		<div class="mb-6 flex flex-row items-center justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"SSL Certificate",
					"Manage your SSL certificates with ease, adding new ones, replacing existing ones, viewing information about current certificates, and substituting them with self-signed certificates to secure your virtual hosts.",
					"ph-lock",
				)
			</div>
			<div class="my-4 flex space-x-5">
				@componentForm.SubmitButton(
					"", "Add/swap SSL certificate", "ph-plus-square",
					"speedia-500", "speedia-300",
					"openAddOrReplaceSslCertificateModal()", false,
				)
			</div>
		</div>
		<div
			id="ssls-table"
			hx-get="/ssls/"
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms, click from:button#swap-to-self-signed-button delay:500ms"
			hx-select="#ssls-table"
			hx-target="#ssls-table"
			hx-swap="outerHTML transition:true"
			class="card w-full"
		>
			@SslsTable(sslPairs)
		</div>
		@AddOrReplaceSslCertificateModal(vhostsHostnames)
		@RemoveVirtualHostsHostnamesModal(vhostsHostnames)
		@SwapToSelfSignedModal()
	</div>
}

templ SslsTable(sslPairs []entity.SslPair) {
	<div class="bg-os-800 p-4 rounded-xl">
		<div class="p-4 bg-os-500 rounded-lg space-y-3 pt-2">
			<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
				<thead class="text-xs uppercase text-neutral-400">
					<tr class="border-b border-neutral-500 border-opacity-90 text-center">
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Virtual Hosts Hostnames</th>
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Issued At</th>
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Expires At</th>
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Certificate Authority</th>
						<th scope="col" class="px-5 py-3 w-1/7"></th>
					</tr>
				</thead>
				<tbody>
					for _, sslPair := range sslPairs {
						<tr class="bg-os-800 text-white">
							<th scope="row" class="px-5 py-3 w-1/4 text-left space-y-2">
								for _, vhostHostname := range sslPair.VirtualHostsHostnames {
									@componentStructural.Tag("ph-network", "", vhostHostname.String(), "speedia-500")
								}
							</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ sslPair.Certificate.IssuedAt.GetDateOnly() }</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ sslPair.Certificate.ExpiresAt.GetDateOnly() }</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ sslPair.Certificate.CertificateAuthority.String() }</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-right">
								<div class="inline-flex space-x-2">
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-file-magnifying-glass", "blue-900", "blue-700", "",
										"view PEM files", "blue-500",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-network-slash", "red-800", "red-600",
										"openRemoveVirtualHostsHostnamesModal('"+sslPair.Id.String()+"')",
										"remove virtual hosts hostnames", "red-500",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-arrows-clockwise", "red-800", "red-600",
										"openSwapToSelfSignedModal('"+sslPair.Id.String()+"')",
										"swap to self-signed", "red-500",
									)
								</div>
							</th>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ AddOrReplaceSslCertificateForm(vhostsHostnames []string) {
	<form
		id="add-or-replace-ssl-certificate"
		hx-post="/api/v1/ssl/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="my-6">
			@componentForm.SelectInput(
				"virtualHosts", "Virtual Hosts Hostnames",
				"sslPair.virtualHostsHostnames", vhostsHostnames, false,
			)
		</div>
		<div class="mb-6 space-y-6">
			@componentForm.TextArea("certificate", "Certificate", "sslPair.certificate", false)
			@componentForm.TextArea("key", "Private Key", "sslPair.key", false)
		</div>
		@componentForm.DeactivatableSubmitButton(
			"Add/replace SSL certificate", "ph-check-fat", "closeAddOrReplaceSslCertificateModal()",
			"shouldDisableAddOrReplaceSslCertificateSubmitButton", false,
		)
	</form>
}

templ AddOrReplaceSslCertificateModal(vhostsHostnames []string) {
	@componentStructural.Modal(
		"Add/replace SSL certificate", "isAddOrReplaceSslCertificateModalOpen",
		"closeAddOrReplaceSslCertificateModal()", "",
	) {
		@AddOrReplaceSslCertificateForm(vhostsHostnames)
	}
}

templ RemoveVirtualHostsHostnamesForm(vhostsHostnames []string) {
	<form
		id="remove-virtual-hosts-hostnames"
		hx-put="/api/v1/ssl/vhost/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="mb-6 space-y-6">
			@componentForm.InputFieldReadOnly("text", "id", "Ssl Pair Id", "sslPair.id", false)
			@componentForm.SelectInput(
				"virtualHosts", "Virtual Hosts Hostnames",
				"sslPair.virtualHostsHostnames", vhostsHostnames, false,
			)
		</div>
		@componentForm.DeactivatableSubmitButton(
			"Remove virtual hosts hostnames", "ph-check-fat", "closeRemoveVirtualHostsHostnamesModal()",
			"shouldDisableRemoveVirtualHostsHostnamesSubmitButton", false,
		)
	</form>
}

templ RemoveVirtualHostsHostnamesModal(vhostsHostnames []string) {
	@componentStructural.Modal(
		"Remove virtual hosts hostnames", "isRemoveVirtualHostsHostnamesModalOpen",
		"closeRemoveVirtualHostsHostnamesModal()", "",
	) {
		@RemoveVirtualHostsHostnamesForm(vhostsHostnames)
	}
}

templ SwapToSelfSignedModal() {
	@componentStructural.Modal(
		"Swap with self-signed SSL", "isSwapToSelfSignedModalOpen",
		"closeSwapToSelfSignedModal()", "",
	) {
		<div class="mb-6 space-y-6 p-4 bg-os-500 rounded-md">
			<span class="text-2xl font-bold">Are you sure you want to swap SSL certificate?</span>
			<p class="mt-2">Only use this action if you no longer want to use your current SSL certificate. The system will swap the current certificate with a self-signed SSL until it's able to issue a new valid Let's Encrypt SSL certificate.</p>
		</div>
		<div class="flex space-x-5">
			<div class="basis-2/3">
				@componentForm.SubmitButton(
					"", "Cancel", "", "gray-500",
					"gray-400", "closeSwapToSelfSignedModal()", false,
				)
			</div>
			<div class="basis-1/3">
				@componentForm.SubmitButton(
					"swap-to-self-signed-button", "Yes, swap ssl certificate", "", "speedia-500",
					"speedia-300", "swapToSelfSigned()", false,
				)
			</div>
		</div>
	}
}

package page

import (
	"github.com/speedianet/os/src/domain/entity"
	componentForm "github.com/speedianet/os/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
)

script SslsIndexLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('ssls', () => ({
			// Primary states

			// Auxiliary states
			downloadPemFile(sslPairId, fileContent, fileExtension) {
				const blobFile = new Blob([atob(fileContent)], { type: 'text/plain' });
				const blobFileUrlObject = window.URL.createObjectURL(blobFile);
				const downloadPemFileElement = document.createElement('a');

				downloadPemFileElement.href = blobFileUrlObject;
				downloadPemFileElement.download = `${sslPairId}.${fileExtension}`;
				document.body.appendChild(downloadPemFileElement);

				downloadPemFileElement.click();
				window.URL.revokeObjectURL(blobFileUrlObject);
				document.body.removeChild(downloadPemFileElement);
			},

			// Modal states
		}))
	})
}

templ SslsIndex(sslPairs []entity.SslPair) {
	@SslsIndexLocalState()
	<div x-data="ssls">
		<div class="mb-6 flex flex-row items-center justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"SSL Certificate",
					"Manage your SSL certificates with ease, adding new ones, replacing existing ones, viewing information about current certificates, and substituting them with self-signed certificates to secure your virtual hosts.",
					"ph-lock",
				)
			</div>
			<div class="my-4 flex space-x-5">
				@componentForm.SubmitButton("Add/swap SSL certificate", "ph-plus-square", "", false)
			</div>
		</div>
		<div id="ssls-table" class="card w-full">
			@SslsTable(sslPairs)
		</div>
	</div>
}

templ SslsTable(sslPairs []entity.SslPair) {
	<div class="bg-os-800 p-4 rounded-xl">
		<div class="p-4 bg-os-500 rounded-lg space-y-3 pt-2">
			<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
				<thead class="text-xs uppercase text-neutral-400">
					<tr class="border-b border-neutral-500 border-opacity-90 text-center">
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Virtual Hosts Hostnames</th>
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Issued At</th>
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Expires At</th>
						<th scope="col" class="px-5 py-3 w-1/7 text-left">Certificate Authority</th>
						<th scope="col" class="px-5 py-3 w-1/7"></th>
					</tr>
				</thead>
				<tbody>
					for _, sslPair := range sslPairs {
						<tr class="bg-os-800 text-white">
							<th scope="row" class="px-5 py-3 w-1/4 text-left space-y-2">
								for _, vhostHostname := range sslPair.VirtualHostsHostnames {
									@componentStructural.Tag("ph-network", "", vhostHostname.String(), "speedia-500")
								}
							</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ sslPair.Certificate.IssuedAt.GetDateOnly() }</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ sslPair.Certificate.ExpiresAt.GetDateOnly() }</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-left font-normal">{ sslPair.Certificate.CertificateAuthority.String() }</th>
							<th scope="row" class="px-5 py-3 w-1/4 text-right">
								<div class="inline-flex space-x-2">
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-file-magnifying-glass", "blue-900", "blue-700", "",
										"view PEM files", "blue-500",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-arrows-clockwise", "red-800", "red-600", "",
										"swap to self-signed", "red-500",
									)
								</div>
							</th>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

package page

import (
	"github.com/speedianet/os/src/domain/dto"
	"github.com/speedianet/os/src/domain/valueObject"
	componentForm "github.com/speedianet/os/src/presentation/ui/component/form"
	componentMappings "github.com/speedianet/os/src/presentation/ui/component/mappings"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
	uiHelper "github.com/speedianet/os/src/presentation/ui/helper"
)

script MappingsIndexLocalState() {
    document.addEventListener('alpine:init', () => {
		Alpine.data('mappings', () => ({
			// Primary states
			virtualHost: {},
			get vhostHostnameWithTrailingSlash() {
				return this.virtualHost.hostname + "/"
			},
			mapping: {},
			resetPrimaryStates() {
				this.virtualHost = {
					'hostname': '',
					'type': '',
					'rootDirectory': '',
					'parentHostname': ''
				}
				this.mapping = {
					'id': 0,
					'path': '',
					'matchPattern': '',
					'targetType': 'url',
					'targetValue': '',
					'targetHttpResponseCode': ''
				}
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary states
			isAdvancedSettingsClosed: true,
			isCreateMappingFromVhost: false,
			resetAuxiliaryStates() {
				this.isAdvancedSettingsClosed = true;
				this.isCreateMappingFromVhost = false;
			},
			get shouldDisableCreateVhostSubmitButton() {
				if (this.virtualHost.type == 'top-level') {
					return this.virtualHost.hostname == ''
				}

				return this.virtualHost.hostname == '' || this.virtualHost.parentHostname == ''
			},
			get shouldDisableCreateMappingSubmitButton() {
				const isResponseCodeType = this.mapping.targetType == 'response-code'
				const isTargetHttpResponseCodeRequired = isResponseCodeType || this.mapping.targetType == 'inline-html'
				if (isTargetHttpResponseCodeRequired && this.mapping.targetHttpResponseCode == '') {
					return true
				}

				const isTargetValueRequired = !isResponseCodeType && this.mapping.targetType != 'static-files'
				if (isTargetValueRequired && this.mapping.targetValue == '') {
					return true
				}

				return this.virtualHost.hostname == ''
			},

			// Modal states
			isCreateVhostModalOpen: false,
			openCreateVhostModal() {
				this.resetPrimaryStates();

				this.isCreateVhostModalOpen = true;
			},
			closeCreateVhostModal() {
				this.isCreateVhostModalOpen = false;
			},
			isDeleteVhostModalOpen: false,
			openDeleteVhostModal(vhostHostname) {
				this.resetPrimaryStates();

				this.virtualHost.hostname = vhostHostname;
				this.isDeleteVhostModalOpen = true;
			},
			closeDeleteVhostModal() {
				this.isDeleteVhostModalOpen = false;
			},
			deleteVhostElement() {
				htmx.ajax(
					'DELETE',
					'/api/v1/vhosts/' + this.virtualHost.hostname + '/',
					{swap: 'none'},
				);
				this.closeDeleteVhostModal();
			},
			isCreateMappingModalOpen: false,
			openCreateMappingModal() {
				this.resetPrimaryStates();
				this.resetAuxiliaryStates();

				this.isCreateMappingModalOpen = true;
			},
			isCreateMappingFromVhostModalOpen: false,
			openCreateMappingFromVhostModal(vhostHostname) {
				this.resetPrimaryStates();
				this.resetAuxiliaryStates();

				this.virtualHost.hostname = vhostHostname
				this.isCreateMappingFromVhostModalOpen = true;
				this.isCreateMappingFromVhost = true;
			},
			closeCreateMappingModal() {
				this.isCreateMappingModalOpen = false;
				this.isCreateMappingFromVhostModalOpen = false;
			},
			isDeleteMappingModalOpen: false,
			openDeleteMappingModal(mappingId, mappingPath) {
				this.resetPrimaryStates();

				this.mapping.id = mappingId;
				this.mapping.path = mappingPath;
				this.isDeleteMappingModalOpen = true;
			},
			closeDeleteMappingModal() {
				this.isDeleteMappingModalOpen = false;
			},
			deleteMappingElement() {
				htmx.ajax(
					'DELETE',
					'/api/v1/vhosts/mapping/' + this.mapping.id + '/',
					{swap: 'none'},
				);
				this.closeDeleteMappingModal();
			},
		}))
	})
}

templ MappingsIndex(vhostsWithMappings []dto.VirtualHostWithMappings) {
	@MappingsIndexLocalState()
	<div x-data="mappings">
		<div class="mb-6 flex flex-row items-center justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"Mappings",
					"Configure how the server handles different URLs and paths. You can specify where static files are located, set responses for HTTP status codes, redirect requests to different URLs, add inline HTML content, and adjust how the server interacts with services like PHP.",
					"ph-graph",
				)
			</div>
			<div class="my-4 flex space-x-5">
				@componentForm.SubmitButton(
					"create-vhost-button", "create virtual host", "ph-plus-square",
					"speedia-500", "speedia-300", "openCreateVhostModal()", false,
				)
				@componentForm.SubmitButton(
					"create-mapping-button", "create mapping", "ph-plus-square",
					"speedia-500", "speedia-300", "openCreateMappingModal()", false,
				)
			</div>
		</div>
		<div
			id="mappings-content"
			hx-get="/mappings/"
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
			hx-select="#mappings-content"
			hx-target="#mappings-content"
			hx-swap="outerHTML transition:true"
			class="flex flex-col"
		>
			<div id="mappings-tables" class="card w-full">
				@MappingsFormTable(vhostsWithMappings)
			</div>
			@CreateVhostModal()
			@componentStructural.DeleteModal(
				"isDeleteVhostModalOpen", "closeDeleteVhostModal()", "deleteVhostElement()",
				"virtualHost.hostname", "virtualHost.hostname",
			)
			@CreateMappingModal(vhostsWithMappings)
			@CreateMappingFromVhostModal(vhostsWithMappings)
			@componentStructural.DeleteModal(
				"isDeleteMappingModalOpen", "closeDeleteMappingModal()", "deleteMappingElement()",
				"mapping.path", "mapping.id",
			)
		</div>
	</div>
}

templ MappingsFormTable(vhostsWithMappings []dto.VirtualHostWithMappings) {
	<table
		class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out"
	>
		<div class="bg-os-800 p-4 rounded-md">
			for _, vhostWithMappings := range vhostsWithMappings {
				<div class="flex bg-os-500 mb-4 p-4 rounded">
					<!-- Vhosts Column -->
					<div class="flex bg-os-800 p-4 w-3/8 min-h-56 flex-col rounded">
						<div class="flex justify-between items-center">
							<span class="text-xl">{ vhostWithMappings.Hostname.String() }</span>
							<div class="flex space-x-2">
								@componentStructural.CircularIconButtonWithTooltip("ph-plus", "speedia-500", "speedia-300", "openCreateMappingFromVhostModal('"+vhostWithMappings.Hostname.String()+"')", "create mapping", "os-200")
								if vhostWithMappings.Type.String() != "primary" {
									@componentStructural.CircularIconButtonWithTooltip("ph-trash", "red-800", "red-600", "openDeleteVhostModal('"+vhostWithMappings.Hostname.String()+"')", "delete virtual host", "red-500")
								}
							</div>
						</div>
						<div class="flex space-x-3 mt-4">
							@componentStructural.Tag("ph-folder-open", "", vhostWithMappings.RootDirectory.String(), "speedia-300")
							@componentStructural.Tag("ph-file-text", "", vhostWithMappings.Type.String(), "speedia-300")
						</div>
					</div>
					<div class="w-4"></div>
					<!-- Mappings Column -->
					<div class="bg-os-800 p-4 flex-col rounded w-1/1">
						for _, mapping := range vhostWithMappings.Mappings {
							@componentMappings.VhostMappingsList(
								mapping, vhostWithMappings.RootDirectory,
								"openDeleteMappingModal("+mapping.Id.String()+", '"+mapping.Path.String()+"')",
							)
						}
					</div>
				</div>
			}
		</div>
	</table>
}

templ CreateVhostForm() {
	<form
		id="create-vhost-form"
		hx-post="/api/v1/vhosts/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="my-6">
			@componentForm.SelectInput("type", "Type", "virtualHost.type", valueObject.AvailableVirtualHostsTypes, false)
		</div>
		<template x-if="virtualHost.type == 'top-level'">
			<div class="mb-6">
				@componentForm.InputField("text", "hostname", "Hostname", "virtualHost.hostname", false)
			</div>
		</template>
		<template x-if="virtualHost.type == 'subdomain'">
			<div class="mb-6 space-y-6">
				@componentForm.InputField("text", "hostname", "Subdomain", "virtualHost.hostname", false)
				@componentForm.InputField("text", "parentHostname", "Parent Hostname", "virtualHost.parentHostname", false)
			</div>
		</template>
		<template x-if="virtualHost.type == 'alias'">
			<div class="mb-6 space-y-6">
				@componentForm.InputField("text", "hostname", "Alias", "virtualHost.hostname", false)
				@componentForm.InputField("text", "parentHostname", "Parent Hostname", "virtualHost.parentHostname", false)
			</div>
		</template>
		@componentForm.DeactivatableSubmitButton("Create", "ph-check-fat", "closeCreateVhostModal", "shouldDisableCreateVhostSubmitButton", false)
	</form>
}

templ CreateVhostModal() {
	@componentStructural.Modal(
		"Create Virtual Host", "isCreateVhostModalOpen", "closeCreateVhostModal()",
		"",
	) {
		@CreateVhostForm()
	}
}

func getOnlyServiceNames() []string {
	onlyServiceNames := []string{}
	for serviceName := range valueObject.NativeSvcNamesWithAliases {
		onlyServiceNames = append(onlyServiceNames, serviceName)
	}

	return onlyServiceNames
}

templ CreateMappingForm(vhostsWithMappings []dto.VirtualHostWithMappings) {
	<form
		hx-post="/api/v1/vhosts/mapping/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="-mt-4 my-6 space-y-6">
			@componentMappings.MappingTypeRadioInput("targetType", "Type", "mapping.targetType")
			<template x-if="isCreateMappingFromVhost">
				@componentForm.InputFieldReadOnly("text", "hostname", "Hostname", "virtualHost.hostname", false)
			</template>
			<template x-if="!isCreateMappingFromVhost">
				@componentForm.SelectInput("hostname", "Hostname", "virtualHost.hostname", uiHelper.GetVhostHostnames(vhostsWithMappings), false)
			</template>
			@componentForm.InputFieldWithPrefix("text", "path", "Source URL", "mapping.path", "vhostHostnameWithTrailingSlash", false)
		</div>
		<template x-if="mapping.targetType == 'service'">
			<div class="mb-6 space-y-6">
				@componentForm.SelectInput("targetValue", "Service Name", "mapping.targetValue", getOnlyServiceNames(), false)
			</div>
		</template>
		<template x-if="mapping.targetType == 'url'">
			<div class="mb-6 space-y-6">
				@componentForm.InputField("text", "targetValue", "Destination URL", "mapping.targetValue", false)
			</div>
		</template>
		<template x-if="mapping.targetType == 'inline-html'">
			<div class="mb-6 space-y-6">
				@componentForm.TextArea("targetValue", "Inline HTML", "mapping.targetValue", false)
				@componentMappings.ResponseCodeSelectInput("targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode")
			</div>
		</template>
		<template x-if="mapping.targetType == 'response-code'">
			<div class="mb-6 space-y-6">
				@componentMappings.ResponseCodeSelectInput("targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode")
			</div>
		</template>
		<section class="mb-6 w-full rounded-md">
			<details class="bg-os-500 group rounded-md p-4 group-open:bg-opacity-30" x-bin:open="isAdvancedSettingsClosed">
				<summary class="relative flex cursor-pointer list-none items-center pr-8 text-neutral-50 text-opacity-80 focus-visible:outline-none group-open:text-opacity-100 group-hover:text-opacity-100 [&::-webkit-details-marker]:hidden">
					<i class="ph-duotone ph-gear mr-2 text-2xl"></i>
					<span class="font-bold">Advanced Settings</span>
					<i class="ph-bold ph-plus absolute right-0 top-1.5 text-xs transition duration-300 group-open:rotate-45"></i>
				</summary>
				<div class="mt-5 py-2">
					@componentMappings.MatchPatternSelectInput("matchPattern", "Match Pattern", "mapping.matchPattern")
				</div>
			</details>
		</section>
		@componentForm.DeactivatableSubmitButton("Create", "ph-check-fat", "closeCreateMappingModal()", "shouldDisableCreateMappingSubmitButton", false)
	</form>
}

templ CreateMappingModal(vhostsWithMappings []dto.VirtualHostWithMappings) {
	@componentStructural.Modal(
		"Create Mapping", "isCreateMappingModalOpen", "closeCreateMappingModal()",
		"",
	) {
		@CreateMappingForm(vhostsWithMappings)
	}
}

templ CreateMappingFromVhostModal(vhostsWithMappings []dto.VirtualHostWithMappings) {
	@componentStructural.Modal(
		"Create Mapping", "isCreateMappingFromVhostModalOpen",
		"closeCreateMappingModal()", "virtualHost.hostname",
	) {
		@CreateMappingForm(vhostsWithMappings)
	}
}

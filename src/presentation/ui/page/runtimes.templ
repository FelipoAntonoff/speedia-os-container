package page

import (
	"github.com/speedianet/os/src/domain/valueObject"
	componentRuntimes "github.com/speedianet/os/src/presentation/ui/component/runtimes"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
	presenterDto "github.com/speedianet/os/src/presentation/ui/presenter/dto"
)

script RuntimesIndexLocalState(defaultVhostHostname, defaultRuntimeType string) {
    document.addEventListener('alpine:init', () => {
		Alpine.data('runtimes', () => ({
			reloadPage(selectedVhostHostname, selectedRuntimeType) {
				htmx.ajax(
					'GET',
					'/runtimes/?vhostHostname=' + selectedVhostHostname + '&runtimeType=' + selectedRuntimeType,
					{
						select: '#runtimes-page-content',
						target: '#runtimes-page-content',
						indicator: '#loading-overlay',
						swap: 'outerHTML transition:true'
					},
				);
			},
			changeSelectedVhostHostname(selectedVhostHostname) {
				this.reloadPage(selectedVhostHostname, defaultRuntimeType);
			},
			changeSelectedRuntimeType(selectedRuntimeType) {
				this.reloadPage(defaultVhostHostname, selectedRuntimeType);
			},
		}));
	});
}

templ RuntimesIndex(
	runtimeOverview presenterDto.RuntimeOverview,
	existentVhostsHostnames []string,
) {
	<div class="flex flex-col" x-data="runtimes">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Runtimes",
				"",
				"ph-code",
			)
		</div>
		<div
			id="runtimes-page-content"
			hx-get={ "/runtimes/?vhostHostname=" + runtimeOverview.VirtualHostHostname.String() + "&runtimeType=" + runtimeOverview.Type.String() }
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
			hx-select="#runtimes-page-content"
			hx-target="#runtimes-page-content"
			hx-swap="outerHTML transition:true"
			class="card w-full"
		>
			@RuntimesIndexLocalState(
				runtimeOverview.VirtualHostHostname.String(),
				runtimeOverview.Type.String(),
			)
			<div id="runtimes-tabs">
				@RuntimesTabs(runtimeOverview, existentVhostsHostnames)
			</div>
		</div>
	</div>
}

func getRuntimesTabHeaderItems(
	selectedRuntimeType valueObject.RuntimeType,
) []componentStructural.TabHeaderItem {
	tabHeaderItems := []componentStructural.TabHeaderItem{
		{Label: "PHP", ComponentValue: "php-webserver"},
	}

	selectedRuntimeTypeStr := selectedRuntimeType.String()
	for itemIndex := range tabHeaderItems {
		if selectedRuntimeTypeStr != tabHeaderItems[itemIndex].ComponentValue {
			tabHeaderItems[itemIndex].AdditionalClasses = "bg-os-700 hover:bg-os-300 text-slate-500"
			continue
		}

		tabHeaderItems[itemIndex].AdditionalClasses = "bg-os-500 text-neutral-50"
	}

	return tabHeaderItems
}

templ RuntimesTabs(
	runtimeOverview presenterDto.RuntimeOverview,
	existentVhostsHostnames []string,
) {
	@componentStructural.TabHeader(
		getRuntimesTabHeaderItems(runtimeOverview.Type),
		"changeSelectedRuntimeType",
	)
	if runtimeOverview.Type.String() == "php-webserver" {
		@componentRuntimes.PhpRuntimeTabContent(runtimeOverview, existentVhostsHostnames)
	}
}

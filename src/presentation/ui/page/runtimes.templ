package page

import (
	"github.com/speedianet/os/src/domain/entity"
	"github.com/speedianet/os/src/domain/valueObject"
	componentForm "github.com/speedianet/os/src/presentation/ui/component/form"
	componentStructural "github.com/speedianet/os/src/presentation/ui/component/structural"
)

script RuntimesIndexLocalState() {
    document.addEventListener('alpine:init', () => {
		Alpine.data('runtimes', () => ({
			// Primary states
			phpConfigs: {},
			resetPrimaryStates() {
				this.phpConfigs = {
					'hostname': '',
					'version': ''
				}
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary states
			selectedConfigType: 'modules',
			setSelectedConfigType(configType) {
				this.selectedConfigType = configType;
			},
			installPhpService() {
				htmx.ajax(
					'POST',
					'/api/v1/services/installables/',
					{
						swap: 'none',
						values: { name: 'php' },
					},
				);
			}

			// Modal states
		}))
	})
}

templ RuntimesIndex(
	selectedVhostHostname valueObject.Fqdn,
	isPhpInstalled bool,
	phpConfigs entity.PhpConfigs,
) {
	@RuntimesIndexLocalState()
	<div class="flex flex-col" x-data="runtimes">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Runtimes",
				"",
				"ph-code",
			)
		</div>
		<div
			id="runtimes-page-content"
			hx-get={ "/runtimes/?vhostHostname=" + selectedVhostHostname.String() }
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
			hx-select="#runtimes-page-content"
			hx-target="#runtimes-page-content"
			hx-swap="outerHTML transition:true"
			class="card w-full"
		>
			<div id="runtimes-tabs">
				@RuntimesTabs(selectedVhostHostname, isPhpInstalled, phpConfigs)
			</div>
		</div>
	</div>
}

templ PhpServiceNotInstalledWarning() {
	<div class="bg-os-500 rounded-r-lg px-4 pb-4 pt-2">
		<i class="ph-duotone ph-warning text-yellow mr-3 align-middle text-xl"></i>
		<span class="mr-3">The<p class="text-speedia-300 mx-1 inline-flex font-bold">php</p>service is not installed yet.</span>
		@componentForm.SubmitButton(
			"Schedule php service installation", "ph-caret-line-down",
			"installPhpService()", true,
		)
	</div>
}

templ RuntimeModulesForm(phpModules []entity.PhpModule) {
	<template x-if="selectedConfigType == 'modules'">
		<div>
			<p>Modules content here!</p>
		</div>
	</template>
}

templ RuntimeSettingsForm(phpSettings []entity.PhpSetting) {
	<template x-if="selectedConfigType == 'settings'">
		<div>
			<p>Settings content here!</p>
		</div>
	</template>
}

templ RuntimesTabs(
	selectedVhostHostname valueObject.Fqdn,
	isPhpInstalled bool,
	phpConfigs entity.PhpConfigs,
) {
	@componentStructural.TabHeader(
		[]componentStructural.TabHeaderItem{
			{Label: "PHP", ComponentValue: "php", AdditionalClasses: "bg-os-500 text-neutral-50"},
		}, "",
	)
	<!-- RuntimeTabContent -->
	<div class="bg-os-800 -mt-4 rounded-b-xl rounded-r-xl p-4">
		<div class="bg-os-500 flex space-y-3 rounded-b-lg rounded-r-lg px-4 py-10">
			if !isPhpInstalled {
				@componentStructural.SidebarMenu(
					[]componentStructural.SidebarMenuItem{
						{Label: "Modules", Icon: "ph-puzzle-piece", ComponentValue: "modules"},
						{Label: "Settings", Icon: "ph-gear", ComponentValue: "settings"},
					}, "setSelectedConfigType",
				)
				<div class="px-10 py-4">
					@RuntimeModulesForm(phpConfigs.Modules)
					@RuntimeSettingsForm(phpConfigs.Settings)
				</div>
			} else {
				@PhpServiceNotInstalledWarning()
			}
		</div>
	</div>
}

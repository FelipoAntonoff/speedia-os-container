package componentForm

templ SelectInput(
	id, label, bindValuePath string,
	options []string,
	denseMode bool,
) {
	<!-- SelectInput -->
	<div class="relative w-full">
		<select
			id={ id }
			name={ id }
			if bindValuePath != "" {
				x-model:value={ bindValuePath }
			}
			placeholder={ label }
			if denseMode {
				class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 h-7.5 peer relative w-full appearance-none rounded-md border px-1.5 text-[13px] leading-normal text-neutral-100 placeholder-transparent outline-none transition-all"
			} else {
				class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
			}
		>
			<option class="bg-os-500 checked:bg-speedia-500 bg-opacity-90">--</option>
			for _, option := range options {
				<option
					class="bg-os-500 checked:bg-speedia-500 bg-opacity-90"
					value={ option }
				>
					{ option }
				</option>
			}
		</select>
		if label != "" {
			<label
				for={ id }
				class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

type SelectLabelValuePair struct {
	Label string
	Value string
}

templ SelectInputWithLabelValuePair(
	id, label, bindValuePath string,
	options []SelectLabelValuePair,
	denseMode bool,
) {
	<!-- SelectInputWithLabelValuePair -->
	<div class="relative w-full">
		<select
			id={ id }
			name={ id }
			if bindValuePath != "" {
				x-model:value={ bindValuePath }
			}
			placeholder={ label }
			if denseMode {
				class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 h-7.5 peer relative w-full appearance-none rounded-md border px-1.5 text-[13px] leading-normal text-neutral-100 placeholder-transparent outline-none transition-all"
			} else {
				class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
			}
		>
			<option class="bg-os-500 checked:bg-speedia-500 bg-opacity-90">--</option>
			for _, option := range options {
				<option
					class="bg-os-500 checked:bg-speedia-500 bg-opacity-90"
					value={ option.Value }
				>
					{ option.Label }
				</option>
			}
		</select>
		if label != "" {
			<label
				for={ id }
				class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

script MultipleSelectInputLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('multipleSelectInput', () => ({
			randomComplementaryNumericElementId: 0,
			init() {
				this.randomComplementaryNumericElementId = Math.floor(Math.random() * 100);
			},
			isOptionsExpanded: false,
			restylingElementsBasedOnExpansionStatus() {
				const selectInputElement = document.getElementById('multi-select-input-' + this.randomComplementaryNumericElementId);

				const selectInputOverlapElement = document.getElementById('multiple-select-input-overlap-' + this.randomComplementaryNumericElementId);
				const defaultOverlapElementClasses = 'absolute inset-x-0 inset-y-0 border-os-200 hover:border-os-100';

				const selectInputOptionsElement = document.getElementById('multiple-select-input-options-' + this.randomComplementaryNumericElementId);
				const defaultOptionsElementClasses = 'bg-os-500 border border-os-200';

				if (this.isOptionsExpanded) {
					selectInputElement.className = selectInputElement.className.replace(/rounded-md/i, 'rounded-t-md');
					selectInputOverlapElement.className = defaultOverlapElementClasses + ' border-t border-r border-l rounded-t-md';
					selectInputOptionsElement.className = defaultOptionsElementClasses + ' block';

					return;
				}

				selectInputElement.className = selectInputElement.className.replace(/rounded-t-md/i, 'rounded-md');
				selectInputOverlapElement.className = defaultOverlapElementClasses + ' border rounded-md';
				selectInputOptionsElement.className = defaultOptionsElementClasses + ' hidden rounded-b-md';
			},
			toggleOptionsDisplay() {
				if (this.isOptionsExpanded) {
					this.closeOptions();

					return;
				}

				this.isOptionsExpanded = true;
				this.restylingElementsBasedOnExpansionStatus();
			},
			closeOptions() {
				this.isOptionsExpanded = false;
				this.restylingElementsBasedOnExpansionStatus();
			}
		}));
	});
}

templ MultipleSelectInput(
	id, label, bindModelPath string,
	options []string,
	denseMode bool,
) {
	<!-- MultipleSelectInput -->
	@MultipleSelectInputLocalState()
	<div class="relative w-full" x-data="multipleSelectInput" @click.away="closeOptions()">
		<div class="relative" @click="toggleOptionsDisplay()">
			<select
				x-bind:id="'multi-select-input-' + randomComplementaryNumericElementId"
				placeholder={ label }
				if denseMode {
					class="bg-os-300 autofill:bg-os-300 h-7.5 peer relative w-full appearance-none rounded-md px-1.5 text-[13px] leading-normal text-neutral-100 placeholder-transparent outline-none transition-all"
				} else {
					class="bg-os-300 autofill:bg-os-300 peer relative h-10 w-full appearance-none rounded-md px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
				}
			>
				<option
					class="bg-os-500 checked:bg-speedia-500 bg-opacity-90"
					x-text={ bindModelPath + ".length == 0 ? '--' : " + bindModelPath + ".join(', ')" }
				></option>
			</select>
			<div x-bind:id="'multiple-select-input-overlap-' + randomComplementaryNumericElementId" class="border-os-200 hover:border-os-100 absolute inset-x-0 inset-y-0 rounded-md border"></div>
		</div>
		<div x-bind:id="'multiple-select-input-options-' + randomComplementaryNumericElementId" class="bg-os-500 border-os-200 hidden border">
			for _, option := range options {
				<div class="px-3 py-1">
					<label class="inline-flex w-full cursor-pointer items-center">
						<span class="text-sm text-neutral-50">{ option }</span>
						<input
							type="checkbox"
							id={ id }
							name={ id }
							value={ option }
							x-model={ bindModelPath }
							class="peer sr-only"
						/>
						<div class="h-4.5 peer-checked:bg-speedia-500 peer relative ml-auto w-8 rounded-full bg-gray-400 after:absolute after:start-[2px] after:top-0.5 after:h-3.5 after:w-3.5 after:rounded-full after:border after:bg-white after:transition-all after:content-[''] peer-checked:after:translate-x-full peer-checked:after:border-white"></div>
					</label>
				</div>
			}
		</div>
		<label class="from-os-300 via-os-300 absolute -top-2 left-1.5 cursor-text bg-gradient-to-t to-transparent to-50% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80">
			{ label }
		</label>
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

package componentForm

script PasswordInputLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('passwordInput', () => ({
			isPasswordReadable: false,
			generateRandomPassword() {
				const passwordLength = 16;
				const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+';

				let passwordContent = '';
				let passwordIterationCount = 0;
				while (passwordIterationCount < passwordLength) {
					const randomIndex = Math.floor(Math.random() * chars.length);
					const indexAfterRandomIndex = randomIndex + 1;
					passwordContent += chars.substring(randomIndex, indexAfterRandomIndex);

					passwordIterationCount++;
				}

				return passwordContent;
			}
		}));
	});
}

templ PasswordInput(
	id, label, bindModelPath string,
	denseMode bool,
) {
	<!-- PasswordInput -->
	@PasswordInputLocalState()
	<div
		class="flex space-x-2"
		x-data="passwordInput"
	>
		<div class="relative w-full">
			<input
				x-bind:type="isPasswordReadable ? 'text' : 'password'"
				id={ id }
				name={ id }
				x-model:value={ bindModelPath }
				autocomplete="off"
				placeholder={ label }
				if denseMode {
					class="bg-os-300 border-os-200 hover:border-os-100 autofill:bg-os-300 focus:border-os-50 h-7.5 peer relative w-full rounded-md border px-1.5 text-[13px] text-neutral-100 placeholder-transparent outline-none transition-all"
				} else {
					class="bg-os-300 border-os-200 hover:border-os-100 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
				}
			/>
			<div class="absolute right-2 top-1/2 -translate-y-1/2">
				<button type="button" class="bg-inherit mx-1 text-neutral-50 text-xl" @click="isPasswordReadable = !isPasswordReadable">
					<i class="ph-duotone ph-eye-slash" x-show="!isPasswordReadable"></i>
					<i class="ph-duotone ph-eye" x-show="isPasswordReadable"></i>
				</button>
			</div>
			<label
				for={ id }
				class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-50% to-transparent to-50% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		</div>
		<div class="relative group">
			<button
				type="button"
				@click={ bindModelPath + " = generateRandomPassword()" }
				class="inline-flex items-center rounded-md px-3 py-2 lowercase bg-cyan-950 hover:bg-cyan-800 border border-cyan-800 hover:border-transparent"
			>
				<i class="ph-bold ph-binary text-xl"></i>
			</button>
			<div class={ "absolute opacity-0 bottom-full mb-2 transition-all duration-300 group-hover:block group-hover:-translate-y-0.5 group-hover:opacity-100 w-max p-2 bg-cyan-900 text-white text-xs rounded-md shadow-lg" }>
				generate random password
			</div>
		</div>
	</div>
}

basePath: /v1
definitions:
  dto.AddUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdateSvcStatus:
    properties:
      name:
        type: string
      status:
        $ref: '#/definitions/valueObject.ServiceStatus'
      version:
        type: string
    type: object
  dto.UpdateUser:
    properties:
      password:
        type: string
      shouldUpdateApiKey:
        type: boolean
      userId:
        type: integer
    type: object
  entity.AccessToken:
    properties:
      expiresIn:
        type: integer
      tokenStr:
        type: string
      type:
        $ref: '#/definitions/valueObject.AccessTokenType'
    type: object
  entity.Database:
    properties:
      name:
        type: string
      size:
        type: integer
      type:
        $ref: '#/definitions/valueObject.DatabaseType'
      users:
        items:
          $ref: '#/definitions/entity.DatabaseUser'
        type: array
    type: object
  entity.DatabaseUser:
    properties:
      dbName:
        type: string
      dbType:
        $ref: '#/definitions/valueObject.DatabaseType'
      privileges:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  entity.O11yOverview:
    properties:
      currentUsage:
        $ref: '#/definitions/valueObject.CurrentResourceUsage'
      hostname:
        type: string
      publicIp:
        type: string
      runtimeContext:
        $ref: '#/definitions/valueObject.RuntimeContext'
      specs:
        $ref: '#/definitions/valueObject.HardwareSpecs'
      uptimeSecs:
        type: integer
    type: object
  entity.Service:
    properties:
      cpuUsagePercent:
        type: number
      memUsagePercent:
        type: number
      name:
        type: string
      pids:
        items:
          type: integer
        type: array
      status:
        $ref: '#/definitions/valueObject.ServiceStatus'
      uptimeSecs:
        type: number
    type: object
  valueObject.AccessTokenType:
    enum:
    - sessionToken
    - userApiKey
    type: string
    x-enum-varnames:
    - sessionToken
    - userApiKey
  valueObject.CurrentResourceUsage:
    properties:
      cpuUsagePercent:
        type: number
      memUsagePercent:
        type: number
      storageUsage:
        type: number
    type: object
  valueObject.DatabaseType:
    enum:
    - mysql
    - postgres
    type: string
    x-enum-varnames:
    - mysql
    - postgres
  valueObject.HardwareSpecs:
    properties:
      cpuCores:
        type: integer
      cpuFrequency:
        type: number
      cpuModel:
        type: string
      memoryTotal:
        type: integer
      storageTotal:
        type: integer
    type: object
  valueObject.RuntimeContext:
    enum:
    - container
    - vm
    - bareMetal
    type: string
    x-enum-varnames:
    - container
    - vm
    - bareMetal
  valueObject.ServiceStatus:
    enum:
    - running
    - stopped
    - uninstalled
    - installed
    type: string
    x-enum-varnames:
    - running
    - stopped
    - uninstalled
    - installed
host: localhost:10000
info:
  contact:
    email: eng+swagger@speedia.net
    name: Speedia Engineering
    url: https://speedia.net/
  description: Speedia AppManager API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://speedia.net/tos/
  title: SamApi
  version: 0.0.1
paths:
  /auth/login/:
    post:
      consumes:
      - application/json
      description: Generate JWT with credentials
      parameters:
      - description: Login
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AccessToken'
      summary: GenerateJwtWithCredentials
      tags:
      - auth
  /database/{dbType}/:
    get:
      consumes:
      - application/json
      description: List databases names, users and sizes.
      parameters:
      - description: DatabaseType
        enum:
        - mysql
        - postgres
        in: path
        name: dbType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Database'
            type: array
      security:
      - Bearer: []
      summary: GetDatabases
      tags:
      - database
  /o11y/overview/:
    get:
      consumes:
      - application/json
      description: Show system information and resource usage.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.O11yOverview'
      security:
      - Bearer: []
      summary: O11yOverview
      tags:
      - o11y
  /services/:
    get:
      consumes:
      - application/json
      description: List services and their status.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Service'
            type: array
      security:
      - Bearer: []
      summary: GetServices
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Start, stop, install or uninstall a service.
      parameters:
      - description: UpdateServiceStatusDetails
        in: body
        name: updateSvcStatusDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSvcStatus'
      produces:
      - application/json
      responses:
        "200":
          description: ServiceStatusUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateServiceStatus
      tags:
      - services
  /user/:
    post:
      consumes:
      - application/json
      description: Add a new user.
      parameters:
      - description: NewUserDetails
        in: body
        name: addUserDto
        required: true
        schema:
          $ref: '#/definitions/dto.AddUser'
      produces:
      - application/json
      responses:
        "201":
          description: UserCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: AddNewUser
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update an user.
      parameters:
      - description: UpdateUserDetails
        in: body
        name: updateUserDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: UserUpdated message or NewKeyString
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateUser
      tags:
      - user
  /user/{userId}/:
    delete:
      consumes:
      - application/json
      description: Delete an user.
      parameters:
      - description: UserId
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteUser
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Type "Bearer" + JWT token or API key.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

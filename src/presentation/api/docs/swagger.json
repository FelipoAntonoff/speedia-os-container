{
    "swagger": "2.0",
    "info": {
        "description": "Speedia OS API",
        "title": "SosApi",
        "termsOfService": "https://speedia.net/tos/",
        "contact": {
            "name": "Speedia Engineering",
            "url": "https://speedia.net/",
            "email": "eng+swagger@speedia.net"
        },
        "license": {
            "name": "Eclipse Public License v2.0",
            "url": "https://www.eclipse.org/legal/epl-2.0/"
        },
        "version": "0.0.1"
    },
    "host": "localhost:1618",
    "basePath": "/v1",
    "paths": {
        "/account/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List accounts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "GetAccounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Account"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an account (Only id is required).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "UpdateAccount",
                "parameters": [
                    {
                        "description": "UpdateAccount",
                        "name": "updateAccountDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AccountUpdated message or NewKeyString",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "AddNewAccount",
                "parameters": [
                    {
                        "description": "NewAccount",
                        "name": "addAccountDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddAccount"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "AccountCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/account/{accountId}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "DeleteAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AccountId",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AccountDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/login/": {
            "post": {
                "description": "Generate JWT with credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "GenerateJwtWithCredentials",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "loginDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.AccessToken"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cron/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List crons.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "GetCrons",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Cron"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a cron.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "UpdateCron",
                "parameters": [
                    {
                        "description": "UpdateCron",
                        "name": "updateCronDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCron"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CronUpdated message",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new cron.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "AddNewCron",
                "parameters": [
                    {
                        "description": "NewCron",
                        "name": "addCronDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddCron"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CronCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/cron/{cronId}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a cron.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron"
                ],
                "summary": "DeleteCron",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CronId",
                        "name": "cronId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CronDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/database/{dbType}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List databases names, users and sizes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "GetDatabases",
                "parameters": [
                    {
                        "enum": [
                            "mysql",
                            "postgres"
                        ],
                        "type": "string",
                        "description": "DatabaseType",
                        "name": "dbType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Database"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "AddDatabase",
                "parameters": [
                    {
                        "enum": [
                            "mysql",
                            "postgres"
                        ],
                        "type": "string",
                        "description": "DatabaseType",
                        "name": "dbType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AddDatabase",
                        "name": "addDatabaseDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddDatabase"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "DatabaseCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/database/{dbType}/{dbName}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "DeleteDatabase",
                "parameters": [
                    {
                        "enum": [
                            "mysql",
                            "postgres"
                        ],
                        "type": "string",
                        "description": "DatabaseType",
                        "name": "dbType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DatabaseName",
                        "name": "dbName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DatabaseDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/database/{dbType}/{dbName}/user/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new database user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "AddDatabaseUser",
                "parameters": [
                    {
                        "enum": [
                            "mysql",
                            "postgres"
                        ],
                        "type": "string",
                        "description": "DatabaseType",
                        "name": "dbType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DatabaseName",
                        "name": "dbName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AddDatabaseUser",
                        "name": "addDatabaseUserDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddDatabaseUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "DatabaseUserCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/database/{dbType}/{dbName}/user/{dbUser}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a database user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "DeleteDatabaseUser",
                "parameters": [
                    {
                        "enum": [
                            "mysql",
                            "postgres"
                        ],
                        "type": "string",
                        "description": "DatabaseType",
                        "name": "dbType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DatabaseName",
                        "name": "dbName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DatabaseUsername",
                        "name": "dbUser",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DatabaseUserDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/o11y/overview/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Show system information and resource usage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "o11y"
                ],
                "summary": "O11yOverview",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.O11yOverview"
                        }
                    }
                }
            }
        },
        "/runtime/php/{hostname}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get php version, modules and settings for a hostname.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "GetPhpConfigs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hostname",
                        "name": "hostname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PhpConfigs"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update php version, modules and settings for a hostname.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "runtime"
                ],
                "summary": "UpdatePhpConfigs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hostname",
                        "name": "hostname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdatePhpConfigs",
                        "name": "updatePhpConfigsDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePhpConfigs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PhpConfigsUpdated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/services/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List installed services and their status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "GetServices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ServiceWithMetrics"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update service details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "UpdateService",
                "parameters": [
                    {
                        "description": "UpdateServiceDetails",
                        "name": "updateServiceDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ServiceUpdated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/services/custom/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Install a new custom service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "AddCustomService",
                "parameters": [
                    {
                        "description": "AddCustomService",
                        "name": "addCustomServiceDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddCustomService"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CustomServiceCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/services/installable/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Install a new installable service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "AddInstallableService",
                "parameters": [
                    {
                        "description": "AddInstallableService",
                        "name": "addInstallableServiceDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddInstallableService"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "InstallableServiceCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/services/installables/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List installable services.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "GetInstallableServices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.InstallableService"
                            }
                        }
                    }
                }
            }
        },
        "/services/{svcName}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete/Uninstall a service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "services"
                ],
                "summary": "DeleteService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceName",
                        "name": "svcName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ServiceDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/ssl/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List ssl pairs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ssl"
                ],
                "summary": "GetSslPair",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.SslPair"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new ssl pair.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ssl"
                ],
                "summary": "AddNewSslPair",
                "parameters": [
                    {
                        "description": "NewSslPair",
                        "name": "addSslPairDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddSslPair"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SslPairCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/ssl/{sslPairId}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a ssl pair.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ssl"
                ],
                "summary": "DeleteSslPair",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SslPairId",
                        "name": "sslPairId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SslPairDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/vhosts/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List virtual hosts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vhosts"
                ],
                "summary": "GetVirtualHosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.VirtualHost"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new vhost.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vhosts"
                ],
                "summary": "AddNewVirtualHost",
                "parameters": [
                    {
                        "description": "NewVirtualHost (only hostname is required).",
                        "name": "addVirtualHostDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddVirtualHost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "VirtualHostCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/vhosts/mapping/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List virtual hosts with mappings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vhosts"
                ],
                "summary": "GetVirtualHostsWithMappings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.VirtualHostWithMappings"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new vhost mapping.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vhosts"
                ],
                "summary": "CreateMapping",
                "parameters": [
                    {
                        "description": "hostname, path and targetType are required. If targetType is 'url', targetUrl is required and so on.\u003cbr /\u003etargetType may be 'service', 'url' or 'response-code'.\u003cbr /\u003ematchPattern may be 'begins-with', 'contains', 'equals', 'ends-with' or empty.",
                        "name": "addMappingDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddMapping"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MappingCreated",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/vhosts/mapping/{hostname}/{mappingId}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a vhost mapping.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vhosts"
                ],
                "summary": "DeleteMapping",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hostname",
                        "name": "hostname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "MappingId",
                        "name": "mappingId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MappingDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/vhosts/{hostname}/": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a vhost.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vhosts"
                ],
                "summary": "DeleteVirtualHost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hostname",
                        "name": "hostname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VirtualHostDeleted",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AddAccount": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.AddCron": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                }
            }
        },
        "dto.AddCustomService": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "portBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/valueObject.PortBinding"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.AddDatabase": {
            "type": "object",
            "properties": {
                "dbName": {
                    "type": "string"
                }
            }
        },
        "dto.AddDatabaseUser": {
            "type": "object",
            "properties": {
                "dbName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.AddInstallableService": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "portBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/valueObject.PortBinding"
                    }
                },
                "startupFile": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.AddMapping": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "matchPattern": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "targetHttpResponseCode": {
                    "type": "integer"
                },
                "targetServiceName": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                },
                "targetUrl": {
                    "type": "string"
                }
            }
        },
        "dto.AddSslPair": {
            "type": "object",
            "properties": {
                "certificate": {
                    "$ref": "#/definitions/entity.SslCertificate"
                },
                "hostname": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "dto.AddVirtualHost": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "parentHostname": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.Login": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.ServiceWithMetrics": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/definitions/valueObject.ServiceMetrics"
                },
                "name": {
                    "type": "string"
                },
                "nature": {
                    "type": "string"
                },
                "portBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/valueObject.PortBinding"
                    }
                },
                "startupFile": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateAccount": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "shouldUpdateApiKey": {
                    "type": "boolean"
                }
            }
        },
        "dto.UpdateCron": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePhpConfigs": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PhpModule"
                    }
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PhpSetting"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateService": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "portBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/valueObject.PortBinding"
                    }
                },
                "startupFile": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.VirtualHostWithMappings": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Mapping"
                    }
                },
                "parentHostname": {
                    "type": "string"
                },
                "rootDirectory": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entity.AccessToken": {
            "type": "object",
            "properties": {
                "expiresIn": {
                    "type": "integer"
                },
                "tokenStr": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/valueObject.AccessTokenType"
                }
            }
        },
        "entity.Account": {
            "type": "object",
            "properties": {
                "groupId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entity.Cron": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                }
            }
        },
        "entity.Database": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/valueObject.DatabaseType"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.DatabaseUser"
                    }
                }
            }
        },
        "entity.DatabaseUser": {
            "type": "object",
            "properties": {
                "dbName": {
                    "type": "string"
                },
                "dbType": {
                    "$ref": "#/definitions/valueObject.DatabaseType"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entity.InstallableService": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "entity.Mapping": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "matchPattern": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "targetHttpResponseCode": {
                    "type": "integer"
                },
                "targetServiceName": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                },
                "targetUrl": {
                    "type": "string"
                }
            }
        },
        "entity.O11yOverview": {
            "type": "object",
            "properties": {
                "currentUsage": {
                    "$ref": "#/definitions/valueObject.CurrentResourceUsage"
                },
                "hostname": {
                    "type": "string"
                },
                "publicIp": {
                    "type": "string"
                },
                "runtimeContext": {
                    "$ref": "#/definitions/valueObject.RuntimeContext"
                },
                "specs": {
                    "$ref": "#/definitions/valueObject.HardwareSpecs"
                },
                "uptimeSecs": {
                    "type": "integer"
                }
            }
        },
        "entity.PhpConfigs": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PhpModule"
                    }
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PhpSetting"
                    }
                },
                "version": {
                    "$ref": "#/definitions/entity.PhpVersion"
                }
            }
        },
        "entity.PhpModule": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "entity.PhpSetting": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "entity.PhpVersion": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "entity.SslCertificate": {
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "commonName": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "isCA": {
                    "type": "boolean"
                },
                "issuedAt": {
                    "type": "integer"
                }
            }
        },
        "entity.SslPair": {
            "type": "object",
            "properties": {
                "certificate": {
                    "$ref": "#/definitions/entity.SslCertificate"
                },
                "chainCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.SslCertificate"
                    }
                },
                "hostname": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "sslPairId": {
                    "type": "string"
                }
            }
        },
        "entity.VirtualHost": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "parentHostname": {
                    "type": "string"
                },
                "rootDirectory": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "valueObject.AccessTokenType": {
            "type": "string",
            "enum": [
                "sessionToken",
                "accountApiKey"
            ],
            "x-enum-varnames": [
                "sessionToken",
                "accountApiKey"
            ]
        },
        "valueObject.CurrentResourceUsage": {
            "type": "object",
            "properties": {
                "cpuUsagePercent": {
                    "type": "number"
                },
                "memUsagePercent": {
                    "type": "number"
                },
                "storageUsage": {
                    "type": "number"
                }
            }
        },
        "valueObject.DatabaseType": {
            "type": "string",
            "enum": [
                "mysql",
                "postgres"
            ],
            "x-enum-varnames": [
                "mysql",
                "postgres"
            ]
        },
        "valueObject.HardwareSpecs": {
            "type": "object",
            "properties": {
                "cpuCores": {
                    "type": "integer"
                },
                "cpuFrequency": {
                    "type": "number"
                },
                "cpuModel": {
                    "type": "string"
                },
                "memoryTotal": {
                    "type": "integer"
                },
                "storageTotal": {
                    "type": "integer"
                }
            }
        },
        "valueObject.PortBinding": {
            "type": "object",
            "properties": {
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "valueObject.RuntimeContext": {
            "type": "string",
            "enum": [
                "container",
                "vm",
                "bareMetal"
            ],
            "x-enum-varnames": [
                "container",
                "vm",
                "bareMetal"
            ]
        },
        "valueObject.ServiceMetrics": {
            "type": "object",
            "properties": {
                "cpuUsagePercent": {
                    "type": "number"
                },
                "memUsagePercent": {
                    "type": "number"
                },
                "pids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "uptimeSecs": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" + JWT token or API key.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}